from flask import Flask, render_template, request

# flask 웹서버를 실행함
app = Flask(__name__)

#2가지의 xss 취약점을 볼 것임
#stored attack
#아직 데이터가 없어서 가짜 데이터를 넣자.
#데이터 베이스에 이렇게 저장되어있다고 가정하자. -> 데이터베이스에서 가져왔다고 가정하자
def fake_get_from_database():
    data = "<script>alert('stored xss run')" # 스크립트 맺는 것은 원래 있는 script로 인식하게 한다.
    return data


@app.route("/xss", methods=["GET", "POST"])
def xss():
    reflected_xss_string = "" # 아무것도 없으면 빈칸임
    stored_xss_string = ""

    if request.method == "GET":
        if "inputText" in request.args:# arg에 inputText가 있냐?
            reflected_xss_string = request.args.get("inputText",
                                                    default="", type=str)
            #get일 때 default가 = None이다. get(None)이다. 하지만 여기서는 default=''이렇게 쓴다.
            stored_xss_string = fake_get_from_database()# db에서 가져온 것임 (일단 db가 없기 때문에 임시로 이렇게 메소드로 처리함
    #POST가 아닐 때는 if문을 실행하지 않고 render_template을 실행한다.
    return render_template("xss_has_vulnerability.html",
                           reflected_xss_string=reflected_xss_string,
                           stored_xss_string=stored_xss_string)


# 이 웹서버는 127.0.0.1 주소, 포트 5000번에서 동작하며, 에러를 자세히 표시한다 
if __name__ == "__main__":
    app.run(host='127.0.0.1', port=5000, debug=True)
